 /********************************************************************************
						Ultra 64 MARIO Brothers

				 Data files used for tanimoto routines.

			Copyright 1995 Nintendo co., ltd.  All rights reserved

				This module was programmed by Y.Tanimoto

							Dec 6, 1995
*********************************************************************************/
#include "include/gfxmain.h"
#include "include/ymacs.h"
#include "tanidata.h"

ALIGNED8 const u8 texture_waterbox_jrb_water[] = {
#include "textures/segment2/segment2.12458.rgba16.inc.c"
};

ALIGNED8 const u8 texture_waterbox_unknown_water[] = {
#include "textures/segment2/segment2.12C58.rgba16.inc.c"
};

ALIGNED8 const u8 texture_waterbox_mist[] = {
#include "textures/segment2/segment2.13458.ia16.inc.c"
};

ALIGNED8 const u8 texture_waterbox_lava[] = {
#include "textures/segment2/segment2.13C58.rgba16.inc.c"
};


//---------------------------------------------------------------------------------------------
//
//
//		I-matrix.
//
//
/* ========================================================================================
		: Light.
===========================================================================================	*/
static const Lights1 Tani_light[] = { gdSPDefLights1(
     64,  64,  64,
    255, 255, 255, LIGHT_X, LIGHT_Y, LIGHT_Z
) };

/* ========================================================================================
		: I-matrix.
=========================================================================================== */
static const Mtx matrix_identity = {
#ifndef GBI_FLOATS
    {{0x00010000, 0x00000000,
      0x00000001, 0x00000000},
     {0x00000000, 0x00010000,
      0x00000000, 0x00000001},
     {0x00000000, 0x00000000,
      0x00000000, 0x00000000},
     {0x00000000, 0x00000000,
      0x00000000, 0x00000000}}
#else
    {{1.0f, 0.0f, 0.0f, 0.0f},
    {0.0f, 1.0f, 0.0f, 0.0f},
    {0.0f, 0.0f, 1.0f, 0.0f},
    {0.0f, 0.0f, 0.0f, 1.0f}}
#endif
};

/* ========================================================================================
		: Ortho-matrix [ 0.0,320.0,  0.0,240.0,  0.0,2.0 ].
=========================================================================================== */
static const Mtx matrix_fullscreen = {
#ifndef GBI_FLOATS
    {{0x00000000, 0x00000000,
      0x00000000, 0x00000000},
     {0x00000000, 0xffff0000,
      0xffffffff, 0xffff0001},
     {((65536 * 2 / SCREEN_WIDTH) << 16) | 0, 0x00000000,
      (0 << 16) | (65536 * 2 / SCREEN_HEIGHT), 0x00000000},
     {0x00000000, 0x00000000,
      0x00000000, 0x00000000}}
#else
    {{2.0f / SCREEN_WIDTH, 0.0f, 0.0f, 0.0f},
    {0.0f, 2.0f / SCREEN_HEIGHT, 0.0f, 0.0f},
    {0.0f, 0.0f, -1.0f, 0.0f},
    {-1.0f, -1.0f, -1.0f, 1.0f}}
#endif
};

/* ========================================================================================
		: Static DL of drawing one tile.
=========================================================================================== */
const Gfx dl_draw_quad_verts_0123[] = {
    gsSP2Triangles( 0,  1,  2, 0x0,  0,  2,  3, 0x0),
    gsSPEndDisplayList(),
};

/* ========================================================================================
		: Static DL of drawing one tile.
=========================================================================================== */
const Gfx dl_draw_quad_verts_4567[] = {
    gsSP2Triangles( 4,  5,  6, 0x0,  4,  6,  7, 0x0),
    gsSPEndDisplayList(),
};


//---------------------------------------------------------------------------------------------
//
//
//		Used in 'shade.c'.
//
//
/* ========================================================================================
		: Static DL of shadow initialize.
=========================================================================================== */
const Gfx dl_shadow_circle[] = {
    gsDPPipeSync(),
	gsSPClearGeometryMode(G_LIGHTING | G_CULL_BACK),
	gsDPSetCombineMode(G_CC_MODULATEIA, G_CC_MODULATEIA),
	gsDPLoadTextureBlock(shade_txtdat, G_IM_FMT_IA, G_IM_SIZ_8b, 16, 16, 0,
							G_TX_WRAP|G_TX_MIRROR, G_TX_WRAP|G_TX_MIRROR, 
							4, 4, G_TX_NOLOD, G_TX_NOLOD),
	gsSPTexture(0xffff, 0xffff, 0, G_TX_RENDERTILE, G_ON),
	gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of drawing shadow.
=========================================================================================== */
const Gfx dl_shadow_9_verts[] = {
    gsSP2Triangles( 0,  3,  4, 0x0,  0,  4,  1, 0x0),
    gsSP2Triangles( 1,  4,  2, 0x0,  2,  4,  5, 0x0),
    gsSP2Triangles( 3,  6,  4, 0x0,  4,  6,  7, 0x0),
    gsSP2Triangles( 4,  7,  8, 0x0,  4,  8,  5, 0x0),
    gsSPEndDisplayList(),
};

// 0x02014620 - 0x02014638
const Gfx dl_shadow_4_verts[] = {
    gsSP2Triangles( 0,  2,  1, 0x0,  1,  2,  3, 0x0),
    gsSPEndDisplayList(),
};

/* ========================================================================================
		: Static DL of shadow reset.
=========================================================================================== */
const Gfx dl_shadow_end[] = {
    gsDPPipeSync(),
	gsSPTexture(0xffff,0xffff, 0, G_TX_RENDERTILE, G_OFF),
	gsSPSetGeometryMode(G_LIGHTING | G_CULL_BACK ),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPEndDisplayList()
};


//---------------------------------------------------------------------------------------------
//
//
//		Used in 'wipe2.c'.
//
//
/* ========================================================================================
		: Static DL of wipe initialize.
=========================================================================================== */
const Gfx dl_proj_mtx_fullscreen[] = {
    gsDPPipeSync(),
    gsSPClearGeometryMode(G_LIGHTING),
    gsSPMatrix(&matrix_identity, G_MTX_PROJECTION | G_MTX_LOAD | G_MTX_NOPUSH),
    gsSPMatrix(&matrix_fullscreen, G_MTX_PROJECTION | G_MTX_MUL | G_MTX_NOPUSH),
    gsSPMatrix(&matrix_identity, G_MTX_MODELVIEW | G_MTX_LOAD | G_MTX_NOPUSH),
    gsSPPerspNormalize(0xFFFF),
    gsSPEndDisplayList(),
};

/* ========================================================================================
		: Static DL of wipe clear.
=========================================================================================== */
const Gfx dl_screen_transition_end[] = {
    gsDPPipeSync(),
	gsSPSetGeometryMode(G_LIGHTING),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsDPSetRenderMode(G_RM_OPA_SURF, G_RM_OPA_SURF2),
	gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of drawing 8 triangles.
=========================================================================================== */
const Gfx dl_transition_draw_filled_region[] = {
    gsSP2Triangles( 0,  4,  1, 0x0,  1,  4,  5, 0x0),
    gsSP2Triangles( 1,  5,  2, 0x0,  2,  5,  6, 0x0),
    gsSP2Triangles( 2,  6,  7, 0x0,  2,  7,  3, 0x0),
    gsSP2Triangles( 3,  4,  0, 0x0,  3,  7,  4, 0x0),
    gsSPEndDisplayList(),
};


//---------------------------------------------------------------------------------------------
//
//
//		Used in 'bgdraw3.c'.
//
//
/* ========================================================================================
		: Static DL of initialize projection.
=========================================================================================== */
const Gfx dl_skybox_begin[] = {
    gsDPPipeSync(),
	gsSPClearGeometryMode(G_LIGHTING),
	gsDPSetCombineMode(G_CC_DECALRGB, G_CC_DECALRGB),
	gsSPPerspNormalize(0xffff),
	gsSPMatrix(&matrix_identity, G_MTX_PROJECTION | G_MTX_LOAD | G_MTX_NOPUSH),
	gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of initialize graphic.
=========================================================================================== */
const Gfx dl_skybox_tile_tex_settings[] = {
    gsSPMatrix(&matrix_identity, G_MTX_MODELVIEW | G_MTX_LOAD | G_MTX_NOPUSH),
    gsSPTexture(0xffff,0xffff, 0, 0, G_ON),
	gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0,
							 G_TX_CLAMP|G_TX_NOMIRROR, 5, G_TX_NOLOD,
							 G_TX_CLAMP|G_TX_NOMIRROR, 5, G_TX_NOLOD),
	gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of clear and reset.
=========================================================================================== */
const Gfx dl_skybox_end[] = {
    gsDPPipeSync(),
	gsSPTexture(0xffff,0xffff, 0, 0, G_OFF),
	gsSPSetGeometryMode(G_LIGHTING),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPEndDisplayList()
};


//---------------------------------------------------------------------------------------------
//
//
//		Used in 'water.c'.
//
//
/* ========================================================================================
		: Static DL of water initialize.
=========================================================================================== */
const Gfx dl_waterbox_rgba16_begin[] = {
    gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_DECALRGB, G_CC_DECALRGB),
	gsSPClearGeometryMode(G_LIGHTING | G_CULL_BACK),
	gsSPTexture(0xffff, 0xffff, 0, 0, G_ON),
	gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 0,
							 G_TX_WRAP|G_TX_NOMIRROR, 5, G_TX_NOLOD,
							 G_TX_WRAP|G_TX_NOMIRROR, 5, G_TX_NOLOD),
	gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of water initialize [ I/A texture, MODULATE mode ].
=========================================================================================== */
const Gfx dl_waterbox_ia16_begin[] = {
    gsDPPipeSync(),
    gsDPSetCombineMode(G_CC_MODULATEIA, G_CC_MODULATEIA),
    gsSPClearGeometryMode(G_LIGHTING | G_CULL_BACK),
    gsSPTexture(0xFFFF, 0xFFFF, 0, G_TX_RENDERTILE, G_ON),
    gsDPTileSync(),
    gsDPSetTile(G_IM_FMT_IA, G_IM_SIZ_16b, 8, 0, G_TX_RENDERTILE, 0, G_TX_WRAP | G_TX_NOMIRROR, 5, G_TX_NOLOD, G_TX_WRAP | G_TX_NOMIRROR, 5, G_TX_NOLOD),
    gsDPSetTileSize(0, 0, 0, (32 - 1) << G_TEXTURE_IMAGE_FRAC, (32 - 1) << G_TEXTURE_IMAGE_FRAC),
    gsSPEndDisplayList(),
};

/* ========================================================================================
		: Static DL of water reset.
=========================================================================================== */
const Gfx dl_waterbox_end[] = {
    gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),
	gsDPPipeSync(),
	gsSPSetGeometryMode(G_LIGHTING | G_CULL_BACK),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPEndDisplayList()
};


//---------------------------------------------------------------------------------------------
//
//
//		Used in 'areamap.c'.
//
//
/* ========================================================================================
		: Texture data of the arrow.
=========================================================================================== */
static u8 areamap_arrow_txt[] = {
    0xf0,  0xf0,  0xf0,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  
    0xf0,  0xf0,  0xff,  0xff,  0xff,  0xff,  0xf0,  0xf0,  
    0xf0,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xf0,  
    0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  0xff,  
    0xf0,  0xf0,  0xf0,  0xff,  0xff,  0xf0,  0xf0,  0xf0,
    0xf0,  0xf0,  0xf0,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  
    0xf0,  0xf0,  0xf0,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  
    0xf0,  0xf0,  0xf0,  0xff,  0xff,  0xf0,  0xf0,  0xf0,  
};

/* ========================================================================================
		: Static DL of initialize projection.
=========================================================================================== */
const Gfx areamap_init_project[] = {
	gsDPPipeSync(),
	gsSPClearGeometryMode(G_LIGHTING),
	gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
	gsDPSetRenderMode(G_RM_XLU_SURF, G_RM_XLU_SURF),
	gsSPPerspNormalize(0xffff),
	gsSPMatrix(&matrix_identity, G_MTX_PROJECTION | G_MTX_LOAD | G_MTX_NOPUSH),
	gsSPEndDisplayList()
};


/* ========================================================================================
		: Static DL of initialize graphic.
=========================================================================================== */
const Gfx areamap_init_graphic1[] = {
    gsSPMatrix(&matrix_identity, G_MTX_MODELVIEW | G_MTX_LOAD | G_MTX_NOPUSH),
    gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA, G_IM_SIZ_16b, 64, 32, 0, 0,
								G_TX_CLAMP|G_TX_NOMIRROR, 6, G_TX_NOLOD,
								G_TX_CLAMP|G_TX_NOMIRROR, 5, G_TX_NOLOD),
	gsSPTexture(0xffff, 0xffff, 0, 0, G_ON),
	gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of initialize graphic.
=========================================================================================== */
const Gfx dl_ia8_up_arrow_load_texture_block[] = {
    gsDPPipeSync(),
    gsDPSetCombineMode(G_CC_MODULATEIA, G_CC_MODULATEIA),
	gs_Tani_SetUpTileDescrip(G_IM_FMT_IA, G_IM_SIZ_8b, 8, 8, 0, 0,
								G_TX_CLAMP|G_TX_NOMIRROR, 3, G_TX_NOLOD,
								G_TX_CLAMP|G_TX_NOMIRROR, 3, G_TX_NOLOD	),
	gs_Tani_LoadTextureImage(areamap_arrow_txt, G_IM_FMT_IA, G_IM_SIZ_8b, 8, 8, 0, 7),
    gsSPEndDisplayList()
};

/* ========================================================================================
		: Static DL of initialize graphic.
=========================================================================================== */
const Gfx dl_ia8_up_arrow_end[] = {
    gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPEndDisplayList()
};


//---------------------------------------------------------------------------------------------
//
//
//		Used in 'wave.c'.
//
//
/* ========================================================================================
		: Common static Gfx of moving status [ Fixed ].
===========================================================================================	*/
const Gfx dl_paintings_rippling_begin[] = {
    gsDPPipeSync(),
	gsSPSetGeometryMode(G_SHADING_SMOOTH | G_LIGHTING),
	gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
	gsSPLight((&Tani_light[0].l[0]),1),
	gsSPLight((&Tani_light[0].a   ),2),
	gsSPTexture(0xffff, 0xffff, 0, 0, G_ON),
	gsSPEndDisplayList()
};

const Gfx dl_paintings_rippling_end[] = {
    gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPEndDisplayList()
};

const Gfx dl_paintings_env_mapped_begin[] = {
    gsDPPipeSync(),
	gsSPSetGeometryMode(G_SHADING_SMOOTH | G_LIGHTING | G_TEXTURE_GEN),
	gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
	gsSPLight((&Tani_light[0].l[0]),1),
	gsSPLight((&Tani_light[0].a   ),2),
	gsSPTexture(0x0c00, 0x0c00, 0, 0, G_ON),
	gsSPEndDisplayList()
};

const Gfx dl_paintings_env_mapped_end[] = {
    gsSPTexture(0x0c00, 0x0c00, 0, 0, G_OFF),
	gsDPPipeSync(),
	gsSPClearGeometryMode(G_TEXTURE_GEN),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPEndDisplayList()
};

const Gfx dl_paintings_draw_ripples[] = {
    gsSP2Triangles( 0,  1,  2, 0x0,  3,  4,  5, 0x0),
    gsSP2Triangles( 6,  7,  8, 0x0,  9, 10, 11, 0x0),
    gsSP1Triangle(12, 13, 14, 0x0),
    gsSPEndDisplayList(),
};
